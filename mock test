import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.NoSuchElementException;

// 自定义异常类
class InvalidCredentialException extends Exception {
    public InvalidCredentialException(String message) {
        super(message);
    }
}

// 学生类
class Student {
    private String id;
    private String name;
    private int age;

    public Student(String id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Age: " + age;
    }
}

// 主界面类
public class StudentManagementSystem extends JFrame {
    private ArrayList<Student> studentList = new ArrayList<>();
    private JTextArea displayArea;

    public StudentManagementSystem() {
        setTitle("学生信息管理系统");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // 北部：标题
        JLabel titleLabel = new JLabel("学生信息管理系统", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Serif", Font.BOLD, 18));
        add(titleLabel, BorderLayout.NORTH);

        // 中部：输入面板
        JPanel inputPanel = new JPanel(new GridLayout(3, 2));
        inputPanel.add(new JLabel("学生ID:"));
        JTextField idField = new JTextField();
        inputPanel.add(idField);
        inputPanel.add(new JLabel("姓名:"));
        JTextField nameField = new JTextField();
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("年龄:"));
        JTextField ageField = new JTextField();
        inputPanel.add(ageField);

        // 南部：按钮面板
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton addButton = new JButton("添加");
        JButton searchButton = new JButton("查询");
        JButton updateButton = new JButton("更新");
        JButton deleteButton = new JButton("删除");
        buttonPanel.add(addButton);
        buttonPanel.add(searchButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);

        // 显示区域
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);

        // 添加组件到主窗口
        add(inputPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        add(scrollPane, BorderLayout.EAST);

        // 添加按钮事件监听器
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String id = idField.getText();
                    String name = nameField.getText();
                    int age = Integer.parseInt(ageField.getText());

                    if (id.isEmpty() || name.isEmpty()) {
                        throw new InvalidCredentialException("ID和姓名不能为空");
                    }

                    studentList.add(new Student(id, name, age));
                    displayArea.setText("学生添加成功:\n" + studentList.get(studentList.size() - 1));
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "年龄必须为数字", "错误", JOptionPane.ERROR_MESSAGE);
                } catch (InvalidCredentialException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String id = idField.getText();
                try {
                    if (id.isEmpty()) {
                        throw new InvalidCredentialException("ID不能为空");
                    }

                    Student student = findStudentById(id);
                    displayArea.setText("查询结果:\n" + student);
                } catch (InvalidCredentialException | NoSuchElementException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        updateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String id = idField.getText();
                String name = nameField.getText();
                String ageText = ageField.getText();
                try {
                    if (id.isEmpty() || name.isEmpty() || ageText.isEmpty()) {
                        throw new InvalidCredentialException("所有字段不能为空");
                    }

                    int age = Integer.parseInt(ageText);
                    Student student = findStudentById(id);
                    student.setName(name);
                    student.setAge(age);
                    displayArea.setText("学生信息更新成功:\n" + student);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "年龄必须为数字", "错误", JOptionPane.ERROR_MESSAGE);
                } catch (InvalidCredentialException | NoSuchElementException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String id = idField.getText();
                try {
                    if (id.isEmpty()) {
                        throw new InvalidCredentialException("ID不能为空");
                    }

                    Student student = findStudentById(id);
                    studentList.remove(student);
                    displayArea.setText("学生删除成功:\n" + student);
                } catch (InvalidCredentialException | NoSuchElementException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    // 根据ID查找学生
    private Student findStudentById(String id) throws NoSuchElementException {
        for (Student student : studentList) {
            if (student.getId().equals(id)) {
                return student;
            }
        }
        throw new NoSuchElementException("未找到ID为 " + id + " 的学生");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StudentManagementSystem().setVisible(true);
            }
        });
    }
}